from sys import argv
from flask import Flask, request
import os

# TODO: Since this application uses os and exec, it is very unsafe.
# It will be important to look into the safety concerns this brings up before
# this application goes into the hands of the public.

app = Flask(__name__)

# This code should be included in all code generated by our model
# It overrides print to write to a file that our Flask server can read from
# to obtain the results of the code.
#
# TODO: Change my_print to a large hash value so that we don't have to worry about
#       generated code making a function called my_print. We might be able to achieve
#       the same thing using modules but idk
# TODO: Fix the issue where someone calls print with a variable number of arguments.
base_code = \
'''
def my_print(print_arg):
    with open('python_code_output.txt', 'a') as f:
        f.write(str(print_arg))
        f.write('\\n')
print = my_print
'''

@app.route('/', methods=['POST'])
def index():
    my_code = request.get_json()['code']
    result = execute_python(my_code)
    
    # cleanup
    os.remove('python_code_output.txt')
    
    return result

# Description: execute_python will execute @python_code and return anything printed by @python_code
# Params:
#   @python_code
#       -> Type: String
#       -> Format: Should conform to standard formatting rules of python (i.e. include tabs/newlines)
def execute_python(python_code):    
    exec(base_code + python_code)
    return open('python_code_output.txt', 'r').read()

if __name__ == '__main__':
    app.run(debug=True, port=5000)